import logging
from telegram import Update
from telegram.ext import ContextTypes
from db.repositories.news import NewsRepository
from db.tasks import get_repository
from handlers.create_news.common import (
    Steps,
    get_next_step
)
from models.news import NewsStatus, NewsUpdate


logger = logging.getLogger()


async def set_text_step(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
):
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text="üìñ *–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ *\n_\(–°–ª–µ–¥—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞–º, —Å–º–µ–ª–æ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–π—Ç–µ \#—Ç—ç–≥–∏ –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–ª–æ–∂–∏—Ç—å—Å—è –≤ 1000 —Å–∏–º–≤–æ–ª–æ–≤\)_",
        parse_mode="MarkdownV2",
    )

    return Steps.TEXT


async def set_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if len(text) <= 1000:
        news_repo: NewsRepository = get_repository(NewsRepository, context)
        news = await news_repo.get_last_news_by_user_id(user_id=context._user_id)
        news_update = {
            'text': text,
            'status': NewsStatus.partially_completed
        }
        await news_repo.update_news(
            news_update=NewsUpdate(**news_update),
            news_id=news.id
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text=f"–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤\.\.\. –°–µ–π—á–∞—Å –≤ –Ω–µ–º {len(text)}",
            parse_mode="MarkdownV2",
        )
        return Steps.TEXT

    next_step = get_next_step(Steps.TEXT)
    return await next_step(update, context)
