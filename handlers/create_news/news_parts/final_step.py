import logging
from typing import Tuple
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Message, Update
from telegram.ext import ContextTypes, ConversationHandler
from core.config import TELEGRAM_CHANNEL_ID
from db.repositories.news import NewsRepository
from db.repositories.news_votes import NewsVotesRepository
from db.tasks import get_repository
from handlers.common.users import get_user
from handlers.menu import menu
from handlers.show_news import show_news_handler, show_news
from handlers.create_news.common import (
    Steps,
    get_previous_step
)
from handlers.create_news.news_parts.text import set_text_step
from models.news import NewsBase, NewsStatus, NewsUpdate
from models.news_votes import NewsVotesCreate
from models.user import UserPublic


logger = logging.getLogger()


async def set_final_step(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
):


    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text="*–í—Å–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ\! –¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å\.*\n ‚Ü™/back",
        parse_mode="MarkdownV2",
    )

    await show_news_handler(update, context)
    options = [
        [
            InlineKeyboardButton("üîÉ –ó–∞–Ω–æ–≤–æ", callback_data='start_over'),
            InlineKeyboardButton("–î–∞–ª–µ–µ ‚è©", callback_data='final_step'),
        ]
    ]
    keyboard = [*options]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text="*–ü—É–±–ª–∏–∫—É–µ–º –∏–ª–∏ –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ–º\?*",
        reply_markup=reply_markup,
        parse_mode="MarkdownV2",
    )
    return Steps.FINAL_STEP


async def start_over(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user = update.callback_query.from_user
    news_repo: NewsRepository = get_repository(NewsRepository, context)
    news = await news_repo.get_last_news_by_user_id(user_id=user.id)
    await news_repo.update_news(
        news_update=NewsBase(),
        news_id=news.id,
        exclude_unset=False
    )
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text='–°–æ–∑–¥–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—á–∏—â–µ–Ω–∞ - –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ :)',
    )
    return await set_text_step(update, context)


async def final_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    previous_step = get_previous_step(Steps.FINAL_STEP)
    return await previous_step(update, context)


async def final_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user: UserPublic = await get_user(update, context)
    news_repo: NewsRepository = get_repository(NewsRepository, context)
    news = await news_repo.get_last_news_by_user_id(user_id=user.id)

    reply_markup = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("–†–µ–π—Ç–∏–Ω–≥: 0", callback_data=f'rating')],
            [
                InlineKeyboardButton("üëç", callback_data=f'approve:{news.id}'),
                InlineKeyboardButton("üëé", callback_data=f'decline:{news.id}'),
            ]
        ]
    )
    news_post = await show_news(user, context)

    common_params = {
        "chat_id": TELEGRAM_CHANNEL_ID,
        "parse_mode": "MarkdownV2",
        "reply_markup": reply_markup,
    }
    match news_post:
        case object(image=None, video=None):
            message = await context.bot.send_message(
                text=news_post.caption,
                **common_params
            )
        case object(video=None):
            message = await context.bot.send_photo(
                photo=news_post.image,
                caption=news_post.caption,
                **common_params
            )
        case object(image=None):
            message = await context.bot.send_video(
                video=news_post.video,
                caption=news_post.caption,
                **common_params
            )

    news_update = {
        'message_id': message.id,
        'status': NewsStatus.published
    }

    await news_repo.update_news(
        news_update=NewsUpdate(**news_update),
        news_id=news.id
    )

    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text=f'''üí™ –í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞! \n–ü–æ–º–Ω–∏—Ç–µ, –µ—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –≤–∞—à–µ–π –Ω–æ–≤–æ—Å—Ç–∏ —Å—Ç–∞–Ω–µ—Ç –Ω–∏–∂–µ -5, –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞, –∏ —ç—Ç–æ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!
\n –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª: {TELEGRAM_CHANNEL_ID}
''',
    )
    await menu.menu(update, context)

    return ConversationHandler.END
