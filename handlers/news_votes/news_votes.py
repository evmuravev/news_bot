import logging

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.error import BadRequest
from telegram.ext import (
    ContextTypes,
)
from core.config import TELEGRAM_CHANNEL_ID
from db.repositories.news_votes import NewsVotesRepository
from db.repositories.news import NewsRepository
from db.repositories.users import UsersRepository
from db.tasks import get_repository

from handlers.common.users import get_user
from models.news import NewsStatus, NewsUpdate
from models.user import UserPublic


logger = logging.getLogger()


async def delete_news(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        news_id: int
) -> None:
    news_repo: NewsRepository = get_repository(NewsRepository, context)
    user_repo: UsersRepository = get_repository(UsersRepository, context)
    user_repo = get_repository(UsersRepository, context)
    news = await news_repo.get_news_by_id(id=news_id)
    user = await user_repo.get_user_by_id(id=news.user_id)
    if user.is_admin:
        return

    updated_user = await user_repo.inc_num_of_complains(user_id=news.user_id)
    # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 2, —Ç–æ –≤ –±–∞–Ω!
    if updated_user.num_of_complains > 2:
        await user_repo.update_is_banned(user_id=updated_user.id)
        await context.bot.send_message(
            chat_id=updated_user.id,
            text='–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, –í–∞—à–∏ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –æ—Ü–µ–Ω–µ–Ω—ã –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π –∫–∞–Ω–∞–ª–∞. –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏!',
        )
    else:
        await context.bot.send_message(
            chat_id=updated_user.id,
            text='–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –æ—Ü–µ–Ω–∏–ª–∏ –í–∞—à—É –Ω–æ–≤–æ—Å—Ç—å –∏ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞! –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –¥–≤—É—Ö —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö –ø—Ä–∏–≤–µ–¥—É—Ç –í–∞—Å –∫ –±–∞–Ω—É!',
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ—Å—Ç–∏
    news_update = {
        'status': NewsStatus.deleted
    }
    await news_repo.update_news(
        news_update=NewsUpdate(**news_update),
        news_id=news.id
    )

    # –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞
    try:
        await context.bot.delete_message(
            chat_id=TELEGRAM_CHANNEL_ID,
            message_id=update.effective_message.message_id
        )
    except BadRequest as ex:
        logger.warning(ex)


async def news_decline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_user: UserPublic = await get_user(update, context)
    news_votes_repo: NewsVotesRepository = get_repository(NewsVotesRepository, context)
    news_id = int(update.callback_query.data.split(':')[1])

    if current_user and current_user.is_admin:
        await delete_news(update, context, news_id)

    rating = await news_votes_repo.news_downvote(
        news_id=news_id,
        user_id=context._user_id
    )
    await context.bot.answer_callback_query(
        callback_query_id=update.callback_query.id,
        show_alert=True,
        text='–°–ø–∞—Å–∏–±–æ, –≤–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω!',
    )

    reply_markup = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton(f"–†–µ–π—Ç–∏–Ω–≥: {rating}", callback_data=f'rating')],
            [
                InlineKeyboardButton("üëç", callback_data=f'approve:{news_id}'),
                InlineKeyboardButton("üëé", callback_data=f'decline:{news_id}'),
            ]
        ]
    )
    try:
        await update.callback_query.edit_message_reply_markup(reply_markup=reply_markup)
    except BadRequest as ex:
        logger.warning(ex)

    if rating <= -5:
        await delete_news(update, context, news_id)


async def news_approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    news_votes_repo: NewsVotesRepository = get_repository(NewsVotesRepository, context)
    news_id = int(update.callback_query.data.split(':')[1])

    rating = await news_votes_repo.news_upvote(
        news_id=news_id,
        user_id=context._user_id
    )
    await context.bot.answer_callback_query(
        callback_query_id=update.callback_query.id,
        show_alert=True,
        text='–°–ø–∞—Å–∏–±–æ, –≤–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω!',
    )

    reply_markup = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton(f"–†–µ–π—Ç–∏–Ω–≥: {rating}", callback_data=f'rating')],
            [
                InlineKeyboardButton("üëç", callback_data=f'approve:{news_id}'),
                InlineKeyboardButton("üëé", callback_data=f'decline:{news_id}'),
            ]
        ]
    )
    try:
        await update.callback_query.edit_message_reply_markup(reply_markup=reply_markup)
    except BadRequest as ex:
        logger.warning(ex)
